<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title type="html">gRPC made easy with Quarkus</title><link rel="alternate" href="http://www.mastertheboss.com/soa-cloud/quarkus/grpc-made-easy-with-quarkus/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/soa-cloud/quarkus/grpc-made-easy-with-quarkus/</id><updated>2022-11-14T19:06:50Z</updated><content type="html">This article discusses how to create applications with the gRPC framework and Quarkus. We will reuse the sample Service definition from first Java gRPC application and run it as Quarkus REST application. Defining the gRPC Service Firstly, we recommend reading this article for an introduction to the gRPC framework: Getting started with gRPC on Java ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title type="html">KOGITO 1.30.0 RELEASED!</title><link rel="alternate" href="https://blog.kie.org/2022/11/kogito-1-30-0-released.html" /><author><name>Tiago Dolphine</name></author><id>https://blog.kie.org/2022/11/kogito-1-30-0-released.html</id><updated>2022-11-14T11:10:16Z</updated><content type="html">We are glad to announce that the Kogito 1.30.0 release is now available! This goes hand in hand with , release. From a feature point of view, we have included a series of new features and bug fixes, including: * Event State timeout * Allow specifying different event marshallers per channel * Start event is not behaving as expected when exclusive is false * New Avro marshallers/unmarshallers addon * Build SWF examples images with Jib * Group all Jobs service JDBC flavors on one container image * Verify that Kaniko is able to push on Kubernetes internal registry * Deprecate Github Showcase Example * Serverless Operator: Setup Nightly pipeline * Update quarkus-openapi-generator to 0.12.0 For more details head to the complete . All artifacts are available now: * Kogito runtime artifacts are available on Maven Central. * Kogito examples can be found. * Kogito images are available on. * Kogito operator is available in the in OpenShift and Kubernetes. * Kogito tooling 0.25.0 artifacts are available at the. A detailed changelog for 1.30.0 can be found in . New to Kogito? Check out our website . Click the "Get Started" button. The post appeared first on .</content><dc:creator>Tiago Dolphine</dc:creator></entry><entry><title>3 ways to embed a commit hash in Go programs</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/14/3-ways-embed-commit-hash-go-programs" /><author><name>Panagiotis Georgiadis</name></author><id>f2546d72-10b9-4d83-a762-cf5c44656bf6</id><updated>2022-11-14T07:00:00Z</updated><published>2022-11-14T07:00:00Z</published><summary type="html">&lt;p&gt;Whether you are using &lt;a href="https://developers.redhat.com/topics/go"&gt;Go&lt;/a&gt; to write a simple console-based utility or a fancy web application, it is always helpful to reference the previous version of your software. This information is essential, especially for developers. They need to know what the source code looked like in previous versions, so they can debug any issues introduced at specific points in time.&lt;/p&gt; &lt;p&gt;To do that, you need a &lt;em&gt;system&lt;/em&gt; that can &lt;em&gt;control&lt;/em&gt; and manage different &lt;em&gt;versions&lt;/em&gt; of the source code, such as &lt;a href="https://git-scm.com/"&gt;git&lt;/a&gt;. Whenever you want to capture a snapshot of the program's current codebase, you run a &lt;code&gt;git commit&lt;/code&gt; command that saves the code at that point in time. To make sure you do not overwrite a previously saved record, &lt;code&gt;git&lt;/code&gt; creates (by default) a unique identifier, hashed with the SHA-1 algorithm, for every &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Usually, when a decent amount of progress has been made, a couple of features have been implemented and lots of bugs have been fixed, it's about time to make things official and announce a new release version of your software. Of course, embedding the release version is not new. You most likely already have automation in place to provide this information within your software (e.g., during the release pipeline). But this kind of progress doesn't happen in a day. So what happens in the meantime? You do what the rolling-release model does, associating every build (&lt;code&gt;go build&lt;/code&gt;) with a snapshot of the code at that point in time. This is when the &lt;code&gt;git commit&lt;/code&gt; hash comes in handy. There are three ways to embed this hash into your Go program.&lt;/p&gt; &lt;h2&gt;1. Using -ldflags&lt;/h2&gt; &lt;p&gt;The most common way is by using a &lt;code&gt;string&lt;/code&gt; variable, a value populated at build time via flags.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;var Commit string&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;go build -ldflags="-X main.Commit=$(git rev-parse HEAD)"&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The disadvantage here is that you need to remember this syntax and run it every time you build your code. You can make this easier by using &lt;code&gt;Makefiles&lt;/code&gt; to do that for you.&lt;/p&gt; &lt;h2&gt;2. Using go generate&lt;/h2&gt; &lt;p&gt;Another way is to use a file (let's call it &lt;code&gt;VERSION.txt&lt;/code&gt;). This process requires the installation of Go 1.16 or later, since it uses &lt;code&gt;go:generate&lt;/code&gt; to populate the file contents and &lt;code&gt;go:embed&lt;/code&gt; to populate the variable. For example:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;//go:generate sh -c "printf %s $(git rev-parse HEAD) &gt; VERSION.txt" //go:embed VERSION.txt var Commit string&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You have to remember to run &lt;code&gt;go generate&lt;/code&gt; every time before &lt;code&gt;go build&lt;/code&gt;. To avoid developing an unnecessary memory muscle, you can put this block into your &lt;code&gt;Makefile&lt;/code&gt;, which is part of the &lt;code&gt;@build&lt;/code&gt; target.&lt;/p&gt; &lt;p&gt;With this method, you have a file (&lt;code&gt;VERSION.txt&lt;/code&gt;) that always captures the &lt;em&gt;latest&lt;/em&gt; &lt;code&gt;commit hash&lt;/code&gt; of the repository. While this information is not &lt;em&gt;that&lt;/em&gt; useful information for you (since you can also see this information in GitHub's user interface or just using &lt;code&gt;git&lt;/code&gt;), the advantage here is that you can use this file for other things in your &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; environment as well. If a component needs to know the version, now it has an easy way to find it: by reading this file.&lt;/p&gt; &lt;p&gt;However, the downside here is that you have to remember to include that file as part of your code well. This is something that is generated by the computer and not written by a person, so it's not uncommon for people to forget about it.&lt;/p&gt; &lt;p&gt;This way is mostly preferred when you are officially releasing a new stable version of your software, but not every time your merge a PR. Although I can see the benefits, I wouldn't recommend this for daily use.&lt;/p&gt; &lt;h2&gt;3. Using runtime/debug package&lt;/h2&gt; &lt;p&gt;The third solution to this problem is quite simple and comes fresh from the &lt;a href="https://pkg.go.dev/runtime/debug"&gt;&lt;u&gt;runtime/debug package&lt;/u&gt;&lt;/a&gt;, which is already part of the official Go library.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;import "runtime/debug" var Commit = func() string { if info, ok := debug.ReadBuildInfo(); ok { for _, setting := range info.Settings { if setting.Key == "vcs.revision" { return setting.Value } } } return "" }()&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Apart from &lt;code&gt;vsc.revision&lt;/code&gt;, you can also query for &lt;code&gt;vcs.time&lt;/code&gt; (that is the &lt;code&gt;timestamp&lt;/code&gt; of the commit message) and check &lt;code&gt;vcs.modified&lt;/code&gt; (that is &lt;code&gt;true&lt;/code&gt; if the binary builds from &lt;em&gt;uncommitted&lt;/em&gt; changes). To make this work, you need Go 1.18, and should build using the &lt;code&gt;-buildvcs&lt;/code&gt; (which should be available in your &lt;code&gt;goenv&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;This is a great way to include the commit hash information without having to take care of building with a specific set of &lt;code&gt;ldflags&lt;/code&gt; or running &lt;code&gt;go generate&lt;/code&gt; every single time. As long as you have Go 1.18 or higher, a simple &lt;code&gt;go build&lt;/code&gt; should suffice to pass the git information into the &lt;code&gt;Commit string&lt;/code&gt; variable.&lt;/p&gt; &lt;h2&gt;What's the best way to embed a commit hash?&lt;/h2&gt; &lt;p&gt;You might ask: Which of the three ways is the best? The answer is that you should pick the one that fits your needs. You might not need any of these methods, or you might use more than one in combination.&lt;/p&gt; &lt;p&gt;Personally, I like the last way, because I don't need a &lt;code&gt;Makefile&lt;/code&gt; and I don't want to remember to do anything extra out of the ordinary. So, if the usual &lt;code&gt;go build&lt;/code&gt; gives me all I need, then that's enough for me. Less is more!&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/14/3-ways-embed-commit-hash-go-programs" title="3 ways to embed a commit hash in Go programs"&gt;3 ways to embed a commit hash in Go programs&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Panagiotis Georgiadis</dc:creator><dc:date>2022-11-14T07:00:00Z</dc:date></entry><entry><title type="html">Vlog: Git Tips on Upstream Repositories and Merge Conflicts</title><link rel="alternate" href="https://www.youtube.com/watch?v=v5d6x3kT7lU" /><author><name>Cameron Rodriguez</name></author><id>https://www.youtube.com/watch?v=v5d6x3kT7lU</id><updated>2022-11-14T00:00:00Z</updated><dc:creator>Cameron Rodriguez</dc:creator></entry><entry><title type="html">Getting started with gRPC on Java</title><link rel="alternate" href="http://www.mastertheboss.com/java/getting-started-with-grpc-on-java/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/java/getting-started-with-grpc-on-java/</id><updated>2022-11-10T17:08:15Z</updated><content type="html">This article is an introduction to gRPC framework which allows to connect services across data centers using high performance Remote Procedure Calls (RPC). To learn the building blocks of this framework, we will show how to create and test your first gRPC application in Java. Overview of gRPC Firstly, some basic concepts: in gRPC, a ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>Set up an OpenShift cluster to deploy an application in odo CLI</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/10/set-openshift-cluster-deploy-application-odo-cli" /><author><name>Francesco Ilario</name></author><id>99cd9947-0cf8-487c-9e3d-9cf898d48fcb</id><updated>2022-11-10T07:00:00Z</updated><published>2022-11-10T07:00:00Z</published><summary type="html">&lt;p&gt;Binding is the task of finding a backing service and connecting it to an application, such as a database. There are several ways to bind applications to cloud services in &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. The &lt;a href="https://odo.dev/"&gt;odo&lt;/a&gt; command-line interface (CLI) consolidates steps that developers normally have to perform manually, and abstracts away Kubernetes and OpenShift background concepts.&lt;/p&gt; &lt;p&gt;With &lt;code&gt;odo&lt;/code&gt;, you can concentrate on creating applications instead of administering the cluster. The &lt;code&gt;odo&lt;/code&gt; tool automates deployment configurations, build configurations, service routes, and other Kubernetes and OpenShift elements.&lt;/p&gt; &lt;p&gt;The Service Binding Operator, employed by &lt;code&gt;odo&lt;/code&gt;, makes the application developer's life a lot easier by providing a consistent and declarative Service Binding method.&lt;/p&gt; &lt;p&gt;This two-part series demonstrates how to use &lt;code&gt;odo&lt;/code&gt; to create an application and a database service, bind the application to the database using the Service Binding Operator, and get access to the application's REST API. This article prepares the environment with the necessary tools. In part 2, &lt;a href="https://developers.redhat.com/articles/2022/08/11/how-install-and-bind-mongodb-and-rest-application"&gt;Implementation of RestAPI application with MongoDB using SBO&lt;/a&gt;, we will install MongoDB and the application, and bind them together.&lt;/p&gt; &lt;h2&gt;A REST application example&lt;/h2&gt; &lt;p&gt;We will use a REST application written in Go as an example here. The application connects to a MongoDB database using the Service Binding Operator and allows you to manage entries in the database. Data consists of place names and descriptions. The REST API's endpoints allow you to add details to the MongoDB instance and perform create, read, update, and delete (CRUD) operations.&lt;/p&gt; &lt;p&gt;When you request a binding, the Service Binding Operator looks at the data stored within the custom resource (CR) and its corresponding custom resource definition (CRD) inside the service. This data contains the parameters required to bind the application to the service. The Service Binding Operator then projects this binding data into the application's workload resources as environment variables or files. To learn more about the Service Binding Operator and its integration with other products, refer to the &lt;a href="https://redhat-developer.github.io/service-binding-operator/userguide/intro.html"&gt;Service Binding documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;To run and interact with the application, you must complete the following procedures successfully:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Install Go and &lt;code&gt;odo&lt;/code&gt; packages&lt;/li&gt; &lt;li&gt;Set up an OpenShift cluster with administrator access&lt;/li&gt; &lt;li&gt;Install the Percona Distribution for MongoDB Operator&lt;/li&gt; &lt;li&gt;Install the Service Binding Operator&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;We will use the following versions of these tools to showcase the application:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Go 1.18.7&lt;/li&gt; &lt;li&gt;odo v3.0.0&lt;/li&gt; &lt;li&gt;OpenShift 4.11&lt;/li&gt; &lt;li&gt;Percona Distribution for MongoDB Operator 1.13.0, provided by &lt;a href="https://www.percona.com"&gt;Percona&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The following steps provide instructions for each prerequisite.&lt;/p&gt; &lt;h2&gt;Step 1: Install Go and odo packages&lt;/h2&gt; &lt;div&gt; &lt;div&gt;&lt;span&gt;Install Go following the &lt;a href="https://go.dev/doc/install"&gt;official guidelines&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;   &lt;div&gt;&lt;span&gt;The odo installation process is as simple as downloading the binary for your OS/ARCH and placing it into a folder referenced by your PATH environment variable. In the following you find the installation procedure for Linux/amd64 and odo-v3.0.0. For a different OS or architecture, check the &lt;/span&gt;&lt;a href="https://odo.dev/docs/overview/installation"&gt;&lt;span&gt;odo Installation page&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/div&gt; &lt;div&gt; &lt;/div&gt; &lt;/div&gt; &lt;ol&gt;&lt;li&gt; &lt;p&gt;Download the latest release from the mirror site&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ curl -L https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/odo/v3.0.0/odo-linux-amd64 -o odo % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 66.7M 100 66.7M 0 0 3261k 0 0:00:20 0:00:20 --:--:-- 3729k&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;odo&lt;/code&gt;,&lt;span&gt; you might have to provide your password for root access&lt;/span&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ sudo install -o root -g root -m 0755 odo /usr/local/bin/odo [sudo] password for user:&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are not allowed to use &lt;code&gt;sudo&lt;/code&gt; or you prefer a rootless installation, you can install the &lt;code&gt;odo&lt;/code&gt; tool to a local folder, like for example &lt;code&gt;~/.local/bin&lt;/code&gt;, and configure your shell:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ mkdir -p ~/.local/bin $ mv odo ~/.local/bin $ export PATH=${HOME}/.local/bin/odo:${PATH} &lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Verify that &lt;code&gt;odo&lt;/code&gt; is installed:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ odo version odo v3.0.0 (8694f1946)&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Step 2: Set up an OpenShift cluster&lt;/h2&gt; &lt;div&gt; &lt;div&gt;&lt;span&gt;There are several ways to use OpenShift, like using &lt;/span&gt;&lt;a href="https://github.com/code-ready/crc"&gt;&lt;span&gt;crc&lt;/span&gt;&lt;/a&gt;&lt;span&gt; or running a managed cluster. You can find more details in the &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;getting started page&lt;/a&gt;. To complete the demo, please ensure to have a cluster with at least 16GB of memory.&lt;/span&gt;&lt;/div&gt;   &lt;div&gt;&lt;span&gt;After you install and log into your own cluster, or log into a managed cluster in the cloud, create a project with the following command:&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;pre&gt; &lt;code&gt;$ odo create project mongodb-restapi ✓ Project "mongodb-restapi" is ready for use ✓ New project created and now using project: mongodb-restapi&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Step 3: Install the Percona Distribution for MongoDB Operator&lt;/h2&gt; &lt;p&gt;We are not installing from &lt;a href="https://operatorhub.io"&gt;OperatorHub&lt;/a&gt; because the installation should be done to our specific &lt;code&gt;mongodb-restapi&lt;/code&gt; OpenShift namespace.&lt;/p&gt; &lt;p&gt;Follow these two steps:&lt;/p&gt; &lt;ol&gt;&lt;li&gt; &lt;p&gt;Install the Percona Distribution for MongoDB Operator:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ oc create -f https://raw.githubusercontent.com/redhat-developer/openshift-app-services-demos/main/samples/sbo/restapi-mongodb-odo/operators/mongodb-percona-distribution.yaml subscription.operators.coreos.com/percona-server-mongodb-operator created operatorgroup.operators.coreos.com/operatorgroup created&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Verify that you have successfully installed the Percona Distribution for MongoDB Operator. Figure 6 shows the output. &lt;pre&gt; &lt;code&gt;$ oc get csv -n mongodb-restapi NAME DISPLAY VERSION REPLACES PHASE percona-server-mongodb-operator.v1 Percona Distribution for MongoDB Operator 1.13.0 Succeeded&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Step 4: Install the Service Binding Operator&lt;/h2&gt; &lt;p&gt;The Service Binding Operator is always installed in all namespaces. Here, we are not installing from the OperatorHub because we must install the Operator in a particular namespace named &lt;code&gt;openshift-operators&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The following two steps will complete the process:&lt;/p&gt; &lt;ol&gt;&lt;li&gt; &lt;p&gt;Install the Service Binding Operator:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ oc create -f https://raw.githubusercontent.com/redhat-developer/openshift-app-services-demos/main/samples/sbo/restapi-mongodb-odo/operators/servicebinding-operator.yaml subscription.operators.coreos.com/my-service-binding-operator created &lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Verify that the Service Binding Operator is successfully installed in your namespace:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ oc get csv -n mongodb-restapi NAME DISPLAY VERSION REPLACES PHASE percona-server-mongodb-operator.v1 Percona Distribution for MongoDB Operator 1.13.0 Succeeded service-binding-operator.v1.3.0 Service Binding Operator 1.3.0 service-binding-operator.v1.2.0 Succeeded&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;The installation and setup are now complete. In the &lt;a href="https://developers.redhat.com/articles/2022/08/11/how-install-and-bind-mongodb-and-rest-application"&gt;next article&lt;/a&gt;, you will clone the application and create a database component for it. If you have questions, please comment below. We welcome your feedback.&lt;/p&gt; &lt;ul&gt;&lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/10/set-openshift-cluster-deploy-application-odo-cli" title="Set up an OpenShift cluster to deploy an application in odo CLI"&gt;Set up an OpenShift cluster to deploy an application in odo CLI&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Francesco Ilario</dc:creator><dc:date>2022-11-10T07:00:00Z</dc:date></entry><entry><title>Starting Quarkus 3</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/road-to-quarkus-3/&#xA;            " /><author><name>Max Rydahl Andersen (https://twitter.com/maxandersen)</name></author><id>https://quarkus.io/blog/road-to-quarkus-3/</id><updated>2022-11-10T00:00:00Z</updated><published>2022-11-10T00:00:00Z</published><summary type="html">Quarkus 3 will continue the tradition of propelling Java development forward by moving fast and keep bringing a cutting-edge user experience with the latest technologies. We are happy to make a first Quarkus 3 Alpha available for users to try out and extension writers to integrate with so that we...</summary><dc:creator>Max Rydahl Andersen (https://twitter.com/maxandersen)</dc:creator><dc:date>2022-11-10T00:00:00Z</dc:date></entry><entry><title>How static application security testing improves software security</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/09/how-static-application-security-testing-improves-software-security" /><author><name>Florencio Cano Gabarda</name></author><id>bd669d29-5afa-4243-9978-b13072135c19</id><updated>2022-11-09T07:00:00Z</updated><published>2022-11-09T07:00:00Z</published><summary type="html">&lt;p&gt;Static application security testing (SAST) is one of the most effective techniques to improve application security. The term covers a variety of testing techniques that analyze an application's source, bytecode, or binary code for security vulnerabilities. Typically, developers complete this analysis during the software development lifecycle of an &lt;a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-218.pdf"&gt;application&lt;/a&gt;. Many SAST tools are mature, and the techniques have become central to &lt;a href="https://developers.redhat.com/topics/secure-coding"&gt;secure coding&lt;/a&gt;. Source code is the most common target of SAST, but you can also utilize SAST on bytecode and binary code.&lt;/p&gt; &lt;p&gt;Binary scanning analyzes the binary itself or the result of disassembling or decompiling it. Scanning binaries can add a benefit, unlike source code scanning, which identifies vulnerabilities created by the compiler. On the other hand, the reports from scanning binaries have many more false positives in some cases.&lt;/p&gt; &lt;p&gt;In general, SAST tools may generate many false positives and require tuning. The &lt;a href="https://redhatproductsecurity.github.io/secure-development-guide/code-scanning/sast.html"&gt;Red Hat Security Guide&lt;/a&gt; provides an overview of SAST.&lt;/p&gt; &lt;h2&gt;Why is SAST important?&lt;/h2&gt; &lt;p&gt;As SAST tools analyze source code, they can point to the exact location of problematic statements. Dynamic application security testing (&lt;a href="https://www.redhat.com/en/blog/automated-dynamic-application-security-testing-enhancing-development-security-rapidast"&gt;DAST&lt;/a&gt;) and other runtime testing can indicate an existing problem, but they might not indicate where the it is.&lt;/p&gt; &lt;p&gt;Additionally, SAST is a recommendation and requirement by many regulations, standards, and frameworks, including the &lt;a href="https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/"&gt;US Executive Order on Improving the Nation's Cybersecurity&lt;/a&gt;, NIST's &lt;a href="https://csrc.nist.gov/publications/detail/sp/800-218/final"&gt;Secure Software Development Framework&lt;/a&gt; (SSDF), and NIST's &lt;a href="https://csrc.nist.gov/publications/detail/sp/800-53/rev-5/final"&gt;Security and Privacy Controls for Information Systems and Organizations&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;How SAST works&lt;/h2&gt; &lt;p&gt;SAST tools parse the source code, bytecode, or binary code to identify security vulnerabilities. The following sections describe two popular techniques that search for patterns and taint analysis.&lt;/p&gt; &lt;h3&gt;How SAST tools search patterns&lt;/h3&gt; &lt;p&gt;A SAST tool frequently looks for patterns and has a catalog of possibly dangerous code constructs. Many tools support ad-hoc patterns too. These tools report a vulnerability whenever it finds a dangerous pattern in the source code. For example, to identify an SQL injection vulnerability in Java, the SAST scanner would search for something like the following:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;String query = "SELECT username FROM users WHERE userid = " + request.getParameter("userid");&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Of course, the tool needs to do the scan generically, so the patterns are generalized versions of code fragments. For example, a tool may scan for a pattern like the following, where &lt;code&gt;$COLUMN&lt;/code&gt;, &lt;code&gt;$TABLE&lt;/code&gt;, &lt;code&gt;$ATTRIBUTE&lt;/code&gt;, and the arguments to &lt;code&gt;getParameter&lt;/code&gt; can be anything:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;String query = "SELECT $COLUMN FROM $TABLE WHERE $ATTRIBUTE = " + request.getParameter(...);&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This technique, unfortunately, generates many false positives.&lt;/p&gt; &lt;h3&gt;How Taint analysis works&lt;/h3&gt; &lt;p&gt;Taint analysis finds data that comes into the program from untrusted sources, such as user input, and marks that data as tainted. Tainted data is considered dangerous to use. Then, the tool follows this tainted data in the code to see whether any known cleaning function cleans it. The tool reports a security vulnerability if tainted data is passed as a parameter to a dangerous function (a sink) before cleaning.&lt;/p&gt; &lt;p&gt;Tainted analysis techniques report fewer false positives than pattern-based rules, but still may report too many false positives if the SAST scanner is not tuned. When tuning, you disallow rules that generate too many false positives and specify cleaning functions. This analysis is not a trivial effort.&lt;/p&gt; &lt;h2&gt;Other types of SAST&lt;/h2&gt; &lt;p&gt;Some people include Software Composition Analysis (SCA) and hardcoded secrets scanning in the concept of SAST. SCA identifies dependencies used by a code base and their versions. Then various vulnerability databases are consulted to determine whether these dependencies have known vulnerabilities.&lt;/p&gt; &lt;p&gt;Hardcoded secrets scanning identifies whether the source code contains secrets such as passwords, API keys, or private keys. Good security practices recommend storing secrets separately from source code, such as environment variables or a secrets management solution.&lt;/p&gt; &lt;h2&gt;The SAST workflow&lt;/h2&gt; &lt;p&gt;You should execute SAST tools as much to the left (at early stages) as possible in the development lifecycle of an application. Developers should build these tools into their integrated development environment (IDE) if possible. That way, they can see potential issues in the source code and fix them as the developers code.&lt;/p&gt; &lt;p&gt;Another place to execute SAST tools is when a developer creates a pull or merge request. If the ruleset used by the tool is mature enough, you should add the findings as comments to the commit and block the pull request until you fix the vulnerabilities.&lt;/p&gt; &lt;p&gt;It is challenging to completely eliminate false positives in the real world. So organizations could establish a threshold whereby a pull request is blocked only by matches made by mature or high-severity rules.&lt;/p&gt; &lt;p&gt;It is more manageable to enable only a few rules when initiating a SAST program so that you can develop as many findings and false positives as you can handle. If you enable all the rules from the beginning, you will have so many false positives that you may give up executing the SAST tool or ignore the findings.&lt;/p&gt; &lt;h2&gt;The languages SAST tools support&lt;/h2&gt; &lt;p&gt;Some SAST tools support multiple languages, whereas others focus on only one, such as &lt;a href="https://github.com/securego/gosec"&gt;gosec&lt;/a&gt; for Go or &lt;a href="https://engineering.fb.com/2020/08/07/security/pysa/"&gt;Pysa&lt;/a&gt; for Python. The tools dedicated to a single language usually implement more specific rules.&lt;/p&gt; &lt;p&gt;Considering multi-language open source SAST tools, we would like to highlight &lt;a href="https://github.com/returntocorp/semgrep"&gt;Semgrep&lt;/a&gt; and &lt;a href="https://github.com/joernio/joern"&gt;Joern&lt;/a&gt;. Both tools are designed to integrate easily into &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;continuous integration/continuous delivery&lt;/a&gt; (CI/CD) pipelines.&lt;/p&gt; &lt;h2&gt;Static application security testing is a worthwhile investment&lt;/h2&gt; &lt;p&gt;Static application security testing (SAST) is an excellent technique for identifying security vulnerabilities in applications, but a significant effort is required to tune SAST tools to make them more usable. The investment in developing a successful SAST program should not be underestimated. If the program is implemented properly, the software's security improves significantly.&lt;/p&gt; &lt;p&gt;You can find an extensive list of SAST tools on &lt;a href="https://github.com/analysis-tools-dev/static-analysis"&gt;GitHub&lt;/a&gt;, including a &lt;a href="https://github.com/analysis-tools-dev/static-analysis#binary"&gt;section on binary code&lt;/a&gt; scanners. The NIST page on &lt;a href="https://www.nist.gov/itl/ssd/software-quality-group/binary-code-scanners"&gt;binary code scanners&lt;/a&gt; also contains a SAST tools list.&lt;/p&gt; &lt;p&gt;We welcome your questions and feedback in the comments section below.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/09/how-static-application-security-testing-improves-software-security" title="How static application security testing improves software security"&gt;How static application security testing improves software security&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Florencio Cano Gabarda</dc:creator><dc:date>2022-11-09T07:00:00Z</dc:date></entry><entry><title>Quarkus 2.14.0.Final released - Jandex 3, new Redis commands, caching annotations for Infinispan</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/quarkus-2-14-0-final-released/&#xA;            " /><author><name>Guillaume Smet (https://twitter.com/gsmet_)</name></author><id>https://quarkus.io/blog/quarkus-2-14-0-final-released/</id><updated>2022-11-09T00:00:00Z</updated><published>2022-11-09T00:00:00Z</published><summary type="html">Today, we released Quarkus 2.14.0.Final with a lot of new features and small improvements all over the place: Upgrade to Jandex 3 Include quarkus-opentelemetry-exporter-otlp into quarkus-opentelemetry Additional Redis commands RESTEasy Reactive: multipart form improvements Support for caching annotations for Infinispan Improved Kotlin support for Hibernate Reactive with Panache Support embedding...</summary><dc:creator>Guillaume Smet (https://twitter.com/gsmet_)</dc:creator><dc:date>2022-11-09T00:00:00Z</dc:date></entry><entry><title>.NET 7 now available for RHEL and OpenShift</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/08/net-7-now-available-rhel-and-openshift" /><author><name>John Clingan</name></author><id>b684ba57-1243-4e26-84fe-89001bd7f4a0</id><updated>2022-11-08T17:00:00Z</updated><published>2022-11-08T17:00:00Z</published><summary type="html">&lt;p&gt;This is a quick overview of what developers need to know about this new major release. The .NET 7 release is now available, targeting&lt;a href="https://developers.redhat.com/products/rhel/overview"&gt; Red Hat Enterprise Linux (RHEL)&lt;/a&gt; 8.7, RHEL 9.1, and&lt;a href="https://developers.redhat.com/products/openshift/overview"&gt; Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;.NET 7 includes 7 new features&lt;/h2&gt; &lt;p&gt;These are the seven new features included in the new .NET 7 release:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;strong&gt;IBM Power support:&lt;/strong&gt; .NET is available for the following architectures:  &lt;ul&gt;&lt;li&gt;ppc64le (64-bit IBM Power) architecture for RHEL 8 and RHEL 9&lt;/li&gt; &lt;li&gt;x86_64 architecture (64-bit Intel/AMD)&lt;/li&gt; &lt;li&gt;ARM64 (64-bit ARM)&lt;/li&gt; &lt;li&gt;s390x (64-bit IBM Z)&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;C# updated to C#11:&lt;/strong&gt; New language version C# 11 included.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;New build support:&lt;/strong&gt; Supports building completely native console applications.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Performance improvements:&lt;/strong&gt; Many performance improvements were made throughout the base libraries, GC and JIT. A new source generator for regular expressions eliminates the cost of compiling (or interpreting) regular expressions at runtime.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;New APIs and improved monitoring:&lt;/strong&gt; It comes with new APIs for working with tar files and Unix file permissions. Improved support for OpenTelemetry.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Generic Math:&lt;/strong&gt; Allows writing generic algorithms that work against any of the built-in numeric types and enables building your own numeric types.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;ASP.NET Core 7 improvements:&lt;/strong&gt; Improves the performance of HTTP/2 and HTTP/3. It extends the minimal APIs (introduced in .NET 6) with additional OpenAPI support, endpoint filters, and route groups.&lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;How to install .NET 7&lt;/h2&gt; &lt;p&gt;Follow these quick steps to install .NET 7 on RHEL.&lt;/p&gt; &lt;p&gt;1. Enter the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-html"&gt;# dnf install dotnet-sdk-7.0&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2. Obtain the container image:&lt;/p&gt; &lt;p&gt;The .NET 7 SDK and runtime container images are available in the Red Hat Container Registry. Container images can be used standalone and with OpenShift on all supported architectures.&lt;/p&gt; &lt;p&gt;Enter the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ podman run --rm registry.redhat.io/ubi8/dotnet-70 dotnet --version 7.0.100&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Standard-term support for .NET 7&lt;/h2&gt; &lt;p&gt;The .NET 7 release provides standard-term support for 18 months. Support will be available until May 2024.&lt;/p&gt; &lt;p&gt;Based on the .NET release schedule, the next version, .NET 8, will be a long-term support release. The release target date is November 2023, and it will provide three years of support.&lt;/p&gt; &lt;p&gt;The existing .NET Core 3.1 and .NET 6 releases provide support until December 2022 and November 2024, respectively.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;This article announced the release of .NET 7 and described its new features. We also demonstrated how to install .NET 7 on RHEL. Please comment below if you have any questions. We welcome your feedback.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/08/net-7-now-available-rhel-and-openshift" title=".NET 7 now available for RHEL and OpenShift"&gt;.NET 7 now available for RHEL and OpenShift&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>John Clingan</dc:creator><dc:date>2022-11-08T17:00:00Z</dc:date></entry></feed>
